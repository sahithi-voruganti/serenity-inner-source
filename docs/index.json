{
  "index.html": {
    "href": "index.html",
    "title": "TODO : Overview | 3M Serenity Documentation",
    "keywords": "TODO : Overview Add details to this page"
  },
  "src/azure-iot-platform/development.html": {
    "href": "src/azure-iot-platform/development.html",
    "title": "Prerequisites | 3M Serenity Documentation",
    "keywords": "Prerequisites .NET Core SDK version 3.1 Azure CLI Ensure the dotnet and az binaries are available in a terminal One-Time Setup Ensure the AppConfigurationConnectionString is set before building so that the Mmm.Iot.Config.ClassGeneration NuGet package can execute during build to automatically generate configuration classes in ./common/Services/Config based on key-value pairs in Azure App Configuration and Azure Key Vault. This can be done in one of two ways: Set an environment variable Use dotnet user-secrets Either way, you will need to choose an Azure App Configuration instance and make note of its <name> and <resource-group> for use in the steps below. Set an environment variable Windows In a PowerShell shell: [System.Environment]::SetEnvironmentVariable('AppConfigurationConnectionString', (az appconfig credential list --name --resource-group --query \"[?name=='Primary'].connectionString | [0]\" --output tsv), 'User') Non-Windows Set the AppConfigurationConnectionString environment variable in the Bash configuration file of your choice. Use dotnet user-secrets Windows In a PowerShell shell: dotnet user-secrets set --project ./common/Services/Services.csproj AppConfigurationConnectionString (az appconfig credential list --name --resource-group --query \"[?name=='Primary'].connectionString | [0]\" --output tsv) Then check the value of the secret: dotnet user-secrets list --project ./common/Services/Services.csproj --json | Select-Object -Skip 1 | Select-Object -SkipLast 1 | ConvertFrom-Json | Select-Object -ExpandProperty AppConfigurationConnectionString Non-Windows In a Bash shell: dotnet user-secrets set --project ./common/Services/Services.csproj AppConfigurationConnectionString az appconfig credential list --name <name> --resource-group <resource-group> --query \"[?name=='Primary'].connectionString | [0]\" --output tsv Then check the value of the secret: dotnet user-secrets list --project common/Services/Services.csproj --json | sed '1d;$d' | jq --raw-output '.AppConfigurationConnectionString' Building Build all services dotnet build Mmm.Iot.sln Build an individual service dotnet build ./ / .sln E.g., to build the Storage Adapter service: dotnet build ./storage-adapter/storage-adapter.sln Build a Docker image for an individual service You must provide a value for the AppConfigurationConnectionString environment variable to the Docker build. This value is a secret and must not be set directly in the Dockerfile via the ENV instruction. Therefore, you must provide the value in the the --build-args option of the docker build command. docker build --file ./ /WebService/Dockerfile --build-arg AppConfigurationConnectionString=$AppConfgurationConnectionString . where $AppConfigurationConnectionString is either an environment variable or dotnet user secret. E.g., to build the Storage Adapter container image: docker build --file ./storage-adapter/WebService/Dockerfile --build-arg AppConfigurationConnectionString=$AppConfgurationConnectionString . Running Run all services Azure DevSpaces Non-Windows First, setup your Azure DevSpaces for use azds use --name --resource-group After setting up Azure DevSpaces, you can build and run each microservice in Azure DevSpaces. From the root of the project, run the script up.sh . To build and run each service in Azure DevSpaces. ./up.sh Each service that is built and ran by up.sh has a unqiue url in the format of http://my-dev-space.s.default.service-name.ABC1234DE.cus.azds.io . You can use this url to begin making requests to each service's API endpoints. Run an individual service The simplest is to use dotnet run to spin up a service on a random port on localhost: dotnet run --project ./ /WebService/WebService.csproj Debugging Use either Visual Studio or Visual Studio Code"
  },
  "src/azure-iot-platform/overview.html": {
    "href": "src/azure-iot-platform/overview.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview Remote monitoring helps you get better visibility into your devices, assets, and sensors wherever they happen to be located. You can collect and analyze real-time device data using a remote monitoring solution that triggers automatic alerts and actions — from remote diagnostics to maintenance requests. You can also command and control your devices. Architecture Overview Development See here for detailed instructions on getting setup for development. Attribution Microsoft graciously provided an IoT Accelerator that we based this code upon: https://github.com/Azure/azure-iot-pcs-remote-monitoring-dotnet"
  },
  "src/dev-setup/dev-spaces.html": {
    "href": "src/dev-setup/dev-spaces.html",
    "title": "Guide | 3M Serenity Documentation",
    "keywords": "Guide A PowerShell script for configuring DevSpaces is available here . Works on Windows and macOS. Not sure about Linux. But we also have a bash version (under Files\\Tools\\DevSpaces). Additional documentation is here . Here are instructions on how to use: To use this file, download DevSpaces.ps1 to your machine Then edit DevSpaces.ps1 line 10 and change the $script:MmmSourceDirectory variable to point to the containing folder of the Serenity repository Then edit your PowerShell profile and add a line to \"dot-source\" DevSpaces.ps1 like so: . 'C:\\Users\\aa30hzz\\DevSpaces.ps1' Then, restart your PowerShell Core terminal Then, create a new DevSpace like so (creates the default/kyle DevSpace): New-DevSpace -Name kyle -Parent default Then, deploy Serenity to the DevSpace like so: Start-SerenityDevSpace -Name kyle Use Stop-SerenityDevSpace and Remove-DevSpace to stop the DevSpace and remove the DevSpace. Scripts Name Windows macOS Linux Configure Dev Spaces DevSpaces.ps1 DevSpaces.ps1 new_dev_space.sh"
  },
  "src/dev-setup/installation-guide.html": {
    "href": "src/dev-setup/installation-guide.html",
    "title": "3M IoT Development Environment Setup Instructions | 3M Serenity Documentation",
    "keywords": "3M IoT Development Environment Setup Instructions This document provides detailed documentation on setting up a development environment to contribute to 3M's IoT Azure Platform, called Bluebird. Note: If you're using a 3M Virtual Machine, it's possible some of the products to install may exist already. Products to Install Please install the following products in the order listed below. Click the project name to open the specific steps for each product below. Wherever relevant, OS specific steps will be provided for both Mac and PC. I would like to also point out that we are not allowed to be admins on our 3M machines, we use elevated access. This is accomplished by right clicking and selecting the elevated access option. Note: Install Issues not specifically addressed in the specific product install guides below should be recorded here. Since we have moved into an open source environment for Odin it is not unreasonable to use our own machines for dev. Sometimes this proves less restrictive and has better up-time. Product Install Guides (by install order) Virtualization (only necessary if developing on Windows) .NET Core 3.1 PowerShell Azure CLI (plus extensions) Visual Studio Code Git / Bash NodeJS / npm Visual Studio 2019 Azure Data Studio Storage Explorer Azure IoT Explorer Docker Terraform Kubernetes Helm Redux Postman Source Code Resources Column1 Column2 IotT Solution - Source Code: https://github.mmm.com/MMM/bluebird - Docs: https://github.mmm.com/pages/MMM/bluebird/ Citrix VM http://3mcitrix.mmm.com Base URL for Solution: https://crsliot-aks-dev.centralus.cloudapp.azure.com Odin Repos for Azure IoT - https://github.mmm.com/pages/MMM/bluebird/ - https://github.mmm.com/orgs/mmm/teams/valkyrie/members - Public: 3M-Company/azure-iot-platform-dotnet Azure DevOps https://dev.azure.com/3m-bluebird/azureplatform Microsoft Team Channels: - 3M: Azure Platforms, Azure Platform Development - ACS: 3M Digital (GGK + Analyst Channel) Project Team 3M Docker Hub https://hub.docker.com/azureiot3m Repositories GitHub Enterprise Code and Infrastructure ( https://github.mmm.com/MMM/azure-iot-services-dotnet ) Azure Functions ( https://github.mmm.com/MMM/azure-iot-messaging-functions ) App Config ( https://github.mmm.com/MMM/azure-iot-appconfig-function ) Device Migration ( https://github.mmm.com/MMM/azure-iot-device-migration ) Functional Testing ( https://github.mmm.com/MMM/azure-iot-functional-tests )"
  },
  "src/dev-setup/microsoft-accelerator.html": {
    "href": "src/dev-setup/microsoft-accelerator.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview This guide provides the steps to get the Microsoft's original solution running. https://docs.microsoft.com/en-us/azure/iot-accelerators/iot-accelerators-remote-monitoring-customize Step 1 Deploy Azure Resources Deploy resources to a trial subscription or existing using the following link: https://www.azureiotsolutions.com/Accelerators https://www.azureiotsolutions.com/Accelerators#description/remote-monitoring Step 2 Download and extract the source code from here: https://github.com/Azure/pcs-remote-monitoring-webui Step 3 Update the Virtual Machine: Deploy a basic instance of the solution accelerator using the pcs CLI. Make a note of the name of your deployment and the credentials you provided for the virtual machine. For more information, see Deploy using the CLI . To enable SSH access to the virtual machine that hosts the microservices in your solution, use the Azure portal or the Azure Cloud Shell. For example: az network nsg rule update --name SSH --nsg-name {your solution name}-nsg --resource-group {your solution name} --access Allow Only enable SSH access during test and development. If you enable SSH, you should disable it as soon as you're finished using it . Use the Azure portal or the Azure Cloud Shell to find the name and public IP address of your virtual machine. For example: az resource list --resource-group {your solution name} -o table az vm list-ip-addresses --name {your vm name from previous command} --resource-group {your solution name} -o table Use SSH to connect to your virtual machine. Use the IP address from the previous step, and the credentials you provided when you ran pcs to deploy the solution. The ssh command is available in the Azure Cloud Shell. To allow the local UX to connect, run the following commands at the bash shell in the virtual machine: cd /app sudo ./start.sh --unsafe After you see the command completes and the web site starts, you can disconnect from the virtual machine. Step 4 To install the required libraries and run the UI locally, run the following commands: npm install npm start In your local copy of the azure-iot-pcs-remote-monitoring-webui repository, edit the .env file to add the URL of your deployed solution: NODE_PATH = src/ REACT_APP_BASE_SERVICE_URL=https://{your solution name}.azurewebsites.net/ At a command prompt, navigate to your local copy of the azure-iot-pcs-remote-monitoring-webui folder. References https://azure.microsoft.com/en-us/features/iot-accelerators/ https://azure.microsoft.com/en-us/features/iot-accelerators/#iot-accelerators-documentation"
  },
  "src/dev-setup/overview.html": {
    "href": "src/dev-setup/overview.html",
    "title": "OVERVIEW | 3M Serenity Documentation",
    "keywords": "OVERVIEW Purpose This document outlines instructions on how we should collectively create detailed installation instructions on setting up a development environment to support 3M's Bluebird IoT platform. See Project Information for details about the engagement. The end result will be given back to 3M to serve as a more comprehensive setup guide then the list of products they provided us. Each of us have different backgrounds and will consequently have unique experience during setup. The more comprehensive we can make this by incorporating all that we run into the better it will be. Contribution Guidelines TODO"
  },
  "src/dev-setup/products-to-install/azure-cli.html": {
    "href": "src/dev-setup/products-to-install/azure-cli.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview The Azure command-line interface (Azure CLI) is a set of commands used to create and manage Azure resources. The Azure CLI is available across Azure services and is designed to get you working quickly with Azure, with an emphasis on automation. Click here to get more details Be sure to add additional extensions, see below . Note: Requires Elevated Permissions on 3M's Virtual Machine Install the Azure CLI The Azure CLI is available to install in Windows, macOS and Linux environments. It can also be run in a Docker container and Azure Cloud Shell. The current version of the Azure CLI is 2.3.1. For information about the latest release, see the release notes . To find your installed version and see if you need to update, run az --version . Install on Windows Install on macOS Install on Linux or Windows Subsystem for Linux (WSL) Install with apt on Debian or Ubuntu Install with yum on RHEL, Fedora, or CentOS Install with zypper on openSUSE or SLE Install from script Run in Docker container Run in Azure Cloud Shell Use extensions with Azure CLI The Azure CLI offers the capability to load extensions. Extensions are Python wheels that aren't shipped as part of the CLI but run as CLI commands. With extensions, you gain access to experimental and pre-release commands along with the ability to write your own CLI interfaces. Click here to get details on how to use extensions Additional Extensions Add the extensions listed below. To do so, use the following command: az extension add --name {extension_name} To see the list of available extensions and their details such as if they're enabed, run the following: az extension list-available Note: if any of your extensions need to be updated, you can swap the add commands with update . Dev Spaces Description: Dev Spaces provides a rapid, iterative Kubernetes development experience for teams. Command: az extension add --name dev-spaces Documentation Note: there is a preview version as well. dev-spaces-preview IoT Description: Comprehensive data-plane functionality to manage Internet of Things (IoT) assets. Command: az extension add --name azure-iot Documentation DevOps Description: Manage Azure DevOps organization level operations including pipelines, boards, repos, artifacts, etc. Command: az extension add --name azure-devops Documentation Azure Kubernetes Service (AKS) Description: Manage Azure Kubernetes Services. Command: az extension add --name aks-preview Documentation"
  },
  "src/dev-setup/products-to-install/azure-data-studio.html": {
    "href": "src/dev-setup/products-to-install/azure-data-studio.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview A light-weight editor that can run on-demand SQL queries, view and save results as text, JSON, or Excel. Edit data, organize your favorite database connections, and browse database objects in a familiar object browsing experience. Download Azure Data Studio can be downloaded from here ."
  },
  "src/dev-setup/products-to-install/azure-iot-explorer.html": {
    "href": "src/dev-setup/products-to-install/azure-iot-explorer.html",
    "title": "Introduction | 3M Serenity Documentation",
    "keywords": "Introduction The Azure IoT explorer is a graphical tool for interacting with and testing your IoT Plug and Play Preview devices. After installing the tool on your local machine, you can use it to connect to a device. You can use the tool to view the telemetry the device is sending, work with device properties, and call commands. Download Azure IoT Explorer can be downloaded from here Install and use Azure IoT explorer Click here to know how to install and use Azure IoT explorer Quick Demo Check out this video for a quick e2e demo ."
  },
  "src/dev-setup/products-to-install/bash.html": {
    "href": "src/dev-setup/products-to-install/bash.html",
    "title": "Introduction | 3M Serenity Documentation",
    "keywords": "Introduction Bash is the shell, or command language interpreter, for the GNU operating system. The name is an acronym for the ‘Bourne-Again SHell’, a pun on Stephen Bourne, the author of the direct ancestor of the current Unix shell sh, which appeared in the Seventh Edition Bell Labs Research version of Unix. Bash is largely compatible with sh and incorporates useful features from the Korn shell ksh and the C shell csh. It is intended to be a conformant implementation of the IEEE POSIX Shell and Tools portion of the IEEE POSIX specification (IEEE Standard 1003.1). It offers functional improvements over sh for both interactive and programming use. While the GNU operating system provides other shells, including a version of csh, Bash is the default shell. Like other GNU software, Bash is quite portable. It currently runs on nearly every version of Unix and a few other operating systems - independently-supported ports exist for MS-DOS, OS/2, and Windows platforms. The improvements offered by Bash include: Command line editing Unlimited size command history Job Control Shell Functions and Aliases Indexed arrays of unlimited size Integer arithmetic in any base from two to sixty-four Download There are many ways to install bash. A couple options are as following: GNU Bash can be found on the main GNU ftp server: http://ftp.gnu.org/gnu/bash/ (via HTTP) and ftp://ftp.gnu.org/gnu/bash/ (via FTP). It can also be found on the GNU mirrors ; please use a mirror if possible. Click here for more details Install with Git You can get bash on windows by installing GIT . This might be the easiest approach for developers using Windows. During the install, choose Windows Explorer integration: VS Code Check out this: https://stackoverflow.com/questions/42606837/how-do-i-use-bash-on-windows-from-the-visual-studio-code-integrated-terminal"
  },
  "src/dev-setup/products-to-install/docker.html": {
    "href": "src/dev-setup/products-to-install/docker.html",
    "title": "Installation guide for Docker | 3M Serenity Documentation",
    "keywords": "Installation guide for Docker Docker is a set of platform as a service products that uses OS-level virtualization to deliver software in packages called containers. Containers are isolated from one another and bundle their own software, libraries and configuration files; they can communicate with each other through well-defined channels. To install it, following the guides below specific to your operating system. Docker on Mac Installation instructions for installing Docker on a Mac can be found here . Docker on Windows What to know before installation Windows 10 64-bit: Pro, Enterprise, or Education (Build 15063 or later). Hyper-V and Containers Windows features must be enabled. The following hardware prerequisites are required to successfully run Client Hyper-V on Windows 10: 64-bit processor with Second Level Address Translation (SLAT) 4GB system RAM BIOS-level hardware virtualization support must be enabled in the BIOS settings. For more information, see Virtualization. For additional information about requirements see: What to know before you install . Steps to setup Docker on Windows Download Docker Desktop https://hub.docker.com/editions/community/docker-ce-desktop-windows/ Double-click Docker Desktop Installer.exe to run the installer. If you haven’t already downloaded the installer (Docker Desktop Installer.exe), you can get it from Docker Hub . It typically downloads to your Downloads folder, or you can run it from the recent downloads bar at the bottom of your web browser. Follow instructions on the installation wizard to accept the license, authorize the installer, and proceed with the install. When prompted, authorize the Docker Desktop Installer with your system password during the install process. Privileged access is needed to install networking components, links to the Docker apps, and manage the Hyper-V VMs. Click Finish on the setup complete dialog and launch the Docker Desktop application. For additional information, see Install Docker Desktop on Windows . To test your installation, follow this guide . Alternative Setup It might now be possible to use use Docker on Windows without having to virtualize thanks to the release of the Linux subsystem for Windows. This approach has not been tested to determine if it will work for this solution. It allows you to run Unbuntu and openSUSE on Windows, with Fedora and more Linux distributions coming soon. As untried alternative to virtualization, if you're using Windows you could try the Linux subsystem for Windows. Note: We have not tried this. Key consideration is whether or not docker images can be instantiated. This documented might be a good guide: https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-10-Client For additional information on the Linux Subsystem: The Windows Subsystem for Linux, introduced in the Anniversary Update , became a stable feature in the Fall Creators Update ."
  },
  "src/dev-setup/products-to-install/dotnet-core.html": {
    "href": "src/dev-setup/products-to-install/dotnet-core.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview .NET Core is a cross-platform successor to the .NET Framework that runs on Windows, Linux, and macOS operating systems. You can download from here . It was open sourced by Microsoft. TODO Did you choose 3.1.0 or 3.1.3 (latest as of 4/8 )?"
  },
  "src/dev-setup/products-to-install/git.html": {
    "href": "src/dev-setup/products-to-install/git.html",
    "title": "Introduction | 3M Serenity Documentation",
    "keywords": "Introduction Git is a distributed version-control system for tracking changes in source code during software development. It is designed for coordinating work among programmers, but it can be used to track changes in any set of files. Its goals include speed, data integrity, and support for distributed, non-linear workflows. It is designed to handle everything from small to very large projects with speed and efficiency. Pre-requisites Be sure to installed VS Code first. Then you'll have the option of hooking Git into VS Code as you're editor. If you're going to use recommended NVM (Node Version Manager) on Windows, you'll need to Enable symbolic links during the installation. See settings section, install step Configuring extra options below for more information. Git Click here to download git for different OS. Settings Use the default values except on the screenshots below. For those steps, use the settings indicated in the screenshot (assuming Win Install). GitHub Desktop (optional) Click here to download GitHub Desktop for macOS, Win, and Linux. Connecting Your GitHub Repository to 3M The repository you are look for is https://github.com/3Mcloud/azure-iot-platform-dotnet/ You will then select Fork in the top right hand corner as displayed below This will then allow you to tie your personal account to the 3m cloud You are able to verify that you are associated by clicking the number next to fork. It will display the different accounts attached as shown below. You can see mine is highlighted, using this method you are able to raise PR's and also submit Reviews. Keep in mind we need two reviews for QA purposes. You can also see what your teammates have been working on by clicking on their account. You are able to sync data from your repo to the 3m master. There are 2 main ways to do this. This way is done by the cli. https://help.github.com/en/github/collaborating-with-issues-and-pull-requests/syncing-a-fork This is the way to do it through the web gui. I think this is the ideal way to do this. I will attach a video and screen shots. https://youtu.be/YhwBgYPfoVE As you can see my repo is 15 commits behind. After comparing it will tell me I am able to merge. You would then submit a PR to sync your fork. CLI Approach to Refresh Local Master with Upstream Changes Note: This approach will completely replace your local master (forked 3M repo) with changes upstream (3M Cloud): git remote add upstream /url/to/original/repo git fetch upstream git checkout master git reset --hard upstream/master git push origin master --force CLI Approach to Creating New Branch By on a new copy of \"master\" (using above approach). Then create a new branch git checkout -b 1245-fix(webui)-deployment-flyout"
  },
  "src/dev-setup/products-to-install/helm.html": {
    "href": "src/dev-setup/products-to-install/helm.html",
    "title": "Installation guide for Helm | 3M Serenity Documentation",
    "keywords": "Installation guide for Helm Prerequisites You will need the command line program kubectl installed on your Windows 10 computer and configured to work with a Kubernetes Cluster. 7-Zip compression / decompression program is needed to extract the Helm program for Windows from the compressed file-folder from the Helm site. You can download it here: https://www.7-zip.org/download.html Steps to Install Download the latest version of the compressed executable from the Helm GitHub site, https://github.com/kubernetes/helm/releases . Navigate to the folder you downloaded the helm-vX.X.X-windows-amd64.tar.gz compressed file from and move the file to its own directory. Navigate to the new directory and right click on the tar.gz file and with 7Zip, open the tar.gz archive. Double click the single tar file in that directory, helm-v2.7.2-windows-amd64.tar. You should now see a windows file folder in the 7Zip window, windows-amd64. Right click on the folder, select Copy To, and select the directory you want to copy the folder to. add the helm program to the System File path to make it easily accessible from the command line. Open the Control Panel’s System panel. Select the Advanced system settings link on the left. Select Environment Variables. Under System variables, select Path, and then select Edit. Select the New button and then add the folder path where you copied the helm folder to and then press OK. Open a new command line window and type helm on the command line to make sure you have access to helm from the command line. Assuming you have the kubectl program configured for your Kubernetes cluster you can now initialize helm. Now you are ready to deploy Kubernetes applications to your kube cluster. Note: Ubuntu and an evaluation copy of Windows. Otherwise you need an ISO and License Key for the OS you intend to install. Using the eval requires a 16GB download."
  },
  "src/dev-setup/products-to-install/kubernetes.html": {
    "href": "src/dev-setup/products-to-install/kubernetes.html",
    "title": "Installation guide for Kubernetes | 3M Serenity Documentation",
    "keywords": "Installation guide for Kubernetes Steps to set up a kubectl on Windows Download the kubectl.exe using a link and save the file in any folder on windows file system. Add the kubectl.exe folder location in path variable - “Advanced System Settings -> Advanced -> Environment Variables -> Path”. For example, if you have saved file to C:/kube then add this folder path to the path variable. Open a command prompt and type kubectl and you should see all commands supported by kubectl. Install minikube *(Not Mandatory) VT-x or AMD-v virtualization must be enabled in your computer’s BIOS. Install the virtualization platform such as Virtualbox or KVM. You are not really required to configure the image. Download the minikube-windows-amd64 file from here . Add this folder path location in path variable: “Advanced System Settings -> Advanced -> Environment Variables -> Path.” For example, if you have saved the file to C:/kube then add this folder path to the path variable. Open the command prompt and fire a command minikube and you should see all the commands supported by minikube. On windows, you can get similar kind of linux kind of user experience with Cygwin. Install Cygwin by following the steps listed on its website . Start minikube : Open the Cygwin terminal and run command $ minikube start. Run command kubectl version to confirm the working of minikube."
  },
  "src/dev-setup/products-to-install/nodejs.html": {
    "href": "src/dev-setup/products-to-install/nodejs.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview NodeJS is a extension from Joyant that builds on Google's V8 Engine that offers a very fast run-time enviornment for solutions built using JavaScript that can run both client-side (web and desktop - via Electron) and server side. The speed comes from Google's non-blocking IO model. BE SURE TO TARGET VERSIONS: NPM 6.4.1 NODE 10.14.1 (local) 11.1 (prod) We recommended using Node Version Manager (NVM) for Windows to be able to support switching between NodeJS versions (which also influences the active NPM version). We have found install issues on some Windows 10 Machines running McAfee. Follow these instructions to avoid install issues: https://medium.com/@tysonpaul89/maintain-multiple-versions-of-node-js-in-windows-operating-system-using-nvm-3c6bf5b63f29 Alternatively, to install NodeJS directly go to https://nodejs.org/ , but you want be able to switch versions so be sure to install the correct version (see above). Additional details about configuring and switching versions using NVM are below Another helpful guide is: Set up your Node.js development environment directly on Windows NVM Alternatives If you have install issues with NVM or are running on a non-windows machine, try the following: While windows-nvm is currently the most popular version manager for node, there are alternatives to consider: nvs (Node Version Switcher) is a cross-platform nvm alternative with the ability to integrate with VS Code . Volta is a new version manager from the LinkedIn team that claims improved speed and cross-platform support. To install Volta as your version manager (rather than windows-nvm), go to the Windows Installation section of their Getting Started guide , then download and run their Windows installer, following the setup instructions. Important: You must ensure that Developer Mode is enabled on your Windows machine before installing Volta. To learn more about using Volta to install multiple versions of Node.js on Windows, see the Volta Docs . Node Version Manager (NVM) Use Node Version Manager (NVM) to support multiple versions: Windows: https://github.com/coreybutler/nvm-windows Linux and MAC: https://github.com/nvm-sh/nvm Note This solution uses older versions of NodeJS. Uses older versions will cause warning to be triggered like: npm WARN npm npm does not support Node.js vXX.XX.XX These can be ignored. It's best to do uninstall any direct node installs before installing NVM. Even though the install on windows seems to merge existing installs, you'll likely still run into issues with the Node Package Manager (NPM). See Uninstall Existing Node Documentation below: Once installed, run the following to install the latest version of NodeJS: Useful NVS Commands List Versions currently installed \"engines\" : { \"node\" : \">=0.12\" } list Install version nvm install \"latest\" or nvm install 10.1 Set current version nvm use 10.1 Set NPM Versions You can change your NPM Versions up or down using the following Getting Lastest NPM Node comes with npm installed so you should have a version of npm. However, npm gets updated more frequently than Node does, so you'll want to make sure it's the latest version. npm install npm@latest -g Targeting Specific NPM Version Just replace @latest with the version number you want to downgrade to. I wanted to downgrade to version 3.10.10, so I used this command: npm install -g npm@3.10.10 Note: If you do a lot of version switching, you might run into the following issue: Error: Node Sass does not yet support your current orted please see: environment: Windows 64-bit with Unsupported runtim1.0e There's an easy fix: npm rebuild node-sass Additional information can be found here . This approach requires python to be installed. Uninstall Existing Node and NPM Versions Uninstall existing Node Version Please note, you need to uninstall any existing versions of node.js before installing NVM for Windows. Also delete any existing nodejs installation directories (e.g., \"C:\\Program Files\\nodejs\") that might remain. NVM's generated symlink will not overwrite an existing (even empty) installation directory. Uninstall existing NPM Version You should also delete the existing npm install location (e.g. \"C:\\Users<user>\\AppData\\Roaming\\npm\"), so that the nvm install location will be correctly used instead. Backup the global npmrc config (e.g. C:\\Users\\&lt;user&gt;\\AppData\\Roaming\\npm\\etc\\npmrc ), if you have some important settings there, or copy the settings to the user config C:\\Users\\&lt;user&gt;\\.npmrc . Helpful Tools TOOL DESCRIPTION NOTES NPM-Check Display package versions and if updates are available. Warning: Careful on making updates. Those are sweeping changes that shouldn't be taken lightly (unless of course you're not installing into the solution or changing dependencies) . ESLint Issues Sometimes ESLint causes a lot of issues. This often happens on a fresh clone that came from a repo built by a different OS. This issue can be easily resolved by running: npm run lint -- --fix"
  },
  "src/dev-setup/products-to-install/npm.html": {
    "href": "src/dev-setup/products-to-install/npm.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview npm (Node Package Manager) is a package manager for the JavaScript programming language. It is the default package manager for the JavaScript runtime environment Node.js. It consists of a command line client, also called npm, and an online database of public and paid-for private packages, called the npm registry. The registry is accessed via the client, and the available packages can be browsed and searched via the npm website. The package manager and the registry are managed by npm, Inc. Command Line Client npm includes a CLI (Command Line Client) that can be used to download and install software: Windows Example C:\\>npm install <package> Mac OS Example >npm install <package> Installing npm npm is installed with Node.js This means that you have to install Node.js to get npm installed on your computer. Download Node.js from the official Node.js web site: https://nodejs.org"
  },
  "src/dev-setup/products-to-install/postman.html": {
    "href": "src/dev-setup/products-to-install/postman.html",
    "title": "Introduction | 3M Serenity Documentation",
    "keywords": "Introduction Postman is a collaboration platform for API development. Postman's features simplify each step of building an API and streamline collaboration so you can create better APIs—faster. Get more detail here Installation and updates Postman is available as a native app for Mac, Windows (32-bit / 64-bit), and Linux (32-bit / 64-bit) operating systems. To get the latest version of the Postman app, visit the download page and click Download for your platform. Installing Postman Mac Windows Linux"
  },
  "src/dev-setup/products-to-install/powershell.html": {
    "href": "src/dev-setup/products-to-install/powershell.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview PowerShell is a command-line shell and associated scripting language that can run on on Windows, Linux and macOS as of version 7. Installation Guides Windows macOS Linux Installing PowerShell in Azure Resources via ARM To access the download packages go here: https://github.com/PowerShell/PowerShell Additional Windows PowerShell 7 is automatically part of Windows 10 IoT Enterprise. Additional details look here: https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-windows?view=powershell-7#deploying-on-windows-10-iot-enterprise"
  },
  "src/dev-setup/products-to-install/redux.html": {
    "href": "src/dev-setup/products-to-install/redux.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview Redux is an open-source JavaScript library for managing application state. It is most commonly used with libraries such as React or Angular for building user interfaces. It was created by Dan Abramov and Andrew Clark. Redux is a predictable state container for JavaScript apps. It helps you write applications that behave consistently, run in different environments (client, server, and native), and are easy to test. On top of that, it provides a great developer experience, such as live code editing combined with a time traveling debugger . You can use Redux together with React , or with any other view library. It is tiny (2kB, including dependencies), but has a large ecosystem of addons available. Installation To install the stable version: npm install redux This assumes you are using npm as your package manager. If you're not, you can access these files on unpkg , download them, or point your package manager to them. Click here to get more details"
  },
  "src/dev-setup/products-to-install/source-code.html": {
    "href": "src/dev-setup/products-to-install/source-code.html",
    "title": "Installing and Configuring 3M's Azure IoT Source Code | 3M Serenity Documentation",
    "keywords": "Installing and Configuring 3M's Azure IoT Source Code Assuming you've completed the major installs required to run the source code, you're now ready to clone the 3M repo and configure the solution on your local development environment. To do so, requires the following steps: Clone Repo Configure Environment Settings Update Source Code Dependencies Build and Run You might also want to watch the setup video: https://www.youtube.com/watch?v=asICCW_1uiI Grant KeyVault Access to Project dotnet user-secrets set --project C:{your path}\\src\\services\\common\\Services\\Services.csproj AppConfigurationConnectionString \"Endpoint=https://crsliot-appconfig-dev.azconfig.io;Id=AMGf-l4-s0:rAtTcp3u1hOQszVB49Tg;Secret=R4VYRXHcDx8FqQxc9xNC4F16Mxt0yG4FReBFVxQF7Is=\" TODO Organize content into the sections below and provide coverage of how/when to use: Icons in React JS Fluent Framework: https://developer.microsoft.com/en-us/fluentui#/styles/web/icons <crsliot-aks-dev.centralus.cloudapp.azure.com> Web UI: dotnet user-secrets set --project C:{your path}\\src\\services\\common\\Services\\Services.csproj AppConfigurationConnectionString \"Endpoint=https://crsliot-appconfig-dev.azconfig.io;Id=AMGf-l4-s0:rAtTcp3u1hOQszVB49Tg;Secret=R4VYRXHcDx8FqQxc9xNC4F16Mxt0yG4FReBFVxQF7Is=\" .env NODE_PATH src/ App config: const baseUrl = \"https://crsliot-aks-dev.centralus.cloudapp.azure.com\";//process.env.REACT_APP_BASE_SERVICE_URL || ''; dotnet user-secrets set --project C:\\DevOps\\OpenSource\\azure-iot-platform-dotnet\\src\\services\\common\\Services\\Services.csproj AppConfigurationConnectionString \"Endpoint=https://crsliot-appconfig-dev.azconfig.io;Id=AMGf-l4-s0:rAtTcp3u1hOQszVB49Tg;Secret=R4VYRXHcDx8FqQxc9xNC4F16Mxt0yG4FReBFVxQF7Is=\" dotnet build mmm.iot.sln C:\\DevOps\\OpenSource\\azure-iot-platform-dotnet\\webui https://github.mmm.com/mmm/azure-iot-services-dotnet npm install npm start Clone Repo There are many ways to clone the 3M Repo. Doing so depends on having Git installed. Internal Repo: https://github.mmm.com/mmm/azure-iot-services-dotnet Public Repo: https://github.com/3M-Company/azure-iot-platform-dotnet/ Configure Environment Settings Use the relevant sections below to configure environment Settings Follow recommendations here: https://github.com/3M-Company/azure-iot-platform-dotnet/blob/master/docs/DEVELOPMENT.md More information on configuring environment variables here. WebUI Environment Variables Use the section below that matches your environment. Windows MAC LINUX Docker and Kubernetes Settings WebUI Development Settings It's necessary to set a few environment settings to get things up and running. Use the section below that matches your environment: Update Source Code Dependencies Build and Run If you have SASS issues run: npm run lint -- --fix Check-in Changes TODO: https://designmodo.com/react-ci-cd/ Services Development Settings TODO: 3MC02YM21KJG5J:webui a9q25zz$ export REACT_APP_BASE_SERVICE_URL=\"https://crsliot-aks-dev.centralus.cloudapp.azure.com/\" References Azure Iot UX Fluent Controls https://www.microsoft.com/design/fluent/ https://github.com/Azure/iot-ux-fluent-controls Library version updates in 3M source code Web UI section update \"node-sass\" version to \"4.13.1\" To install, use: npm install node-sass@4.13.1"
  },
  "src/dev-setup/products-to-install/storage-explorer.html": {
    "href": "src/dev-setup/products-to-install/storage-explorer.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview Upload, download, and manage Azure blobs, files, queues, and tables, as well as Azure Cosmos DB and Azure Data Lake Storage entities. Easily access virtual machine disks, and work with either Azure Resource Manager or classic storage accounts. Manage and configure cross-origin resource sharing rules. Download Storage Explorer can be downloaded from here"
  },
  "src/dev-setup/products-to-install/terraform.html": {
    "href": "src/dev-setup/products-to-install/terraform.html",
    "title": "Installation guide for Terraform | 3M Serenity Documentation",
    "keywords": "Installation guide for Terraform Steps to set up terraform on Windows: To install Terraform, find the appropriate package for your system and download it. Terraform is packaged as a zip archive. After downloading Terraform, unzip the package. Terraform runs as a single binary named terraform. Any other files in the package can be safely removed and Terraform will still function. The final step is to make sure that the terraform binary is available on the PATH. Verify the installation by executing terraform on new terminal session"
  },
  "src/dev-setup/products-to-install/virtualization.html": {
    "href": "src/dev-setup/products-to-install/virtualization.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview If your development environment runs on Windows you must setup virtualization in order to run docker containers locally since some of them run on Linux which Windows does not natively support. This is not necessary on a MacOS since it's based on Unix. Which virtualization product you use is a matter of preference and is typically influence by the OS of your host machine. Historically, Hyper-V was popular for servers and VirtualBox on clients. Virtualization Product PRODUCT VENDOR GUIDES Hyper-V Microsoft MS Install Guide Virtual Box Oracle - Docker for Mac - Using Docker with Virutal Box on Windows Prepare Virtual Machine using Hyper-V Enable Hyper-V. Click for more details . Create a Virtual Machine. Click for more details . Note: Microsoft offers instances of Ubuntu and an evaluation copy of Windows. Currently the evaluation only last 5 days so it's not a great option unless you have an Win 10 Enterprise Key to use to upgrade. Otherwise you need an ISO and License Key for the OS you intend to install. Using the eval requires a 16GB download. Prepare Installation Media Create Virtual Machine Prepare Installation Media If you're going to use your own copy of an operating system, you need to first create an ISO so Hyper-V or VirtualBox can use it to build the Virtual Machine. Microsoft provides a useful tool called Create Windows 10 installation media that can be downloaded here https://www.microsoft.com/en-us/software-download/windows10 . The link includes instructions on how to use. The above approach can also be used for Windows 8.1 and Windows 7. Alternatively there are several open source and 3rd party products that can be used to create ISO. Create Virtual Machine Once you have your ISO, you can start the create virtual machine process. To continue, follow these steps: https://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/quick-create-virtual-machine Alternative As untried alternative to virtualization, if you're using Windows you could try the Linux subsystem for Windows. Note: We have not tried this. Key consideration is whether or not docker images can be instantiated. Use Windows Subsystem for Linux for production: https://docs.microsoft.com/en-us/windows/nodejs/setup-on-windows#use-windows-subsystem-for-linux-for-production The Windows Subsystem for Linux, introduced in the Anniversary Update , became a stable feature in the Fall Creators Update . You can now run Ubuntu and openSUSE on Windows, with Fedora and more Linux distributions coming soon. This documented might be a good guide: https://docs.microsoft.com/en-us/virtualization/windowscontainers/quick-start/set-up-environment?tabs=Windows-10-Client"
  },
  "src/dev-setup/products-to-install/visual-studio-code.html": {
    "href": "src/dev-setup/products-to-install/visual-studio-code.html",
    "title": "Overview | 3M Serenity Documentation",
    "keywords": "Overview VS Code is a editor developed by Microsoft for Windows, Linux and macOS. It can be downloaded here: https://code.visualstudio.com/download Recommended install settings: Windows: Add to Windows Explorer Shortcut Extensions: Required C# for Visual Studios Code - Microsoft PowerShell - Microsoft XUnit Chrome Debugger ReactJS Debugger For additional React Sugar: https://medium.com/productivity-freak/the-ultimate-vscode-setup-for-js-react-6a4f7bd51a2 Extension: Recommended YAML - RedHat Docker - Microsoft Cloud Code - Google Cloud NXunit Test Explorer for Visual Studio Code"
  },
  "src/dev-setup/products-to-install/vs-2019.html": {
    "href": "src/dev-setup/products-to-install/vs-2019.html",
    "title": "Whats new in VS 2019 | 3M Serenity Documentation",
    "keywords": "Whats new in VS 2019 Check the details here Use the community edition if you don't have a licensed version: https://visualstudio.microsoft.com/downloads/ Download Download Visual Studio 2019 from here"
  },
  "src/dev-setup/useful-tools.html": {
    "href": "src/dev-setup/useful-tools.html",
    "title": "Scripts | 3M Serenity Documentation",
    "keywords": "Scripts Name Windows macOS Linux Configure Dev Spaces DevSpaces.ps1 DevSpaces.ps1 new_dev_space.sh Tools Documentation Builder: https://www.mkdocs.org/ Pipeline Tool: WhiteSource Bolt Fluent React: https://developer.microsoft.com/en-us/fluentui#/controls/web Useful Materials Azure Internet of Things Revealed https://tinyurl.com/ybuwr2dd Azure IOT Development Cookbook https://tinyurl.com/y76rpmfq Professional Git https://tinyurl.com/y75nl6hh Git Pocket Guide: A Working Introduction https://tinyurl.com/yacfheo4"
  },
  "src/dev-setup/xunit.html": {
    "href": "src/dev-setup/xunit.html",
    "title": "Install Guide | 3M Serenity Documentation",
    "keywords": "Install Guide You can download the tool from here: https://xunit.net/ XUnit is a unit testing tool for the .NET Framework"
  }
}